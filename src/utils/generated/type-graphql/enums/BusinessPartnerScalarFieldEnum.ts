import * as TypeGraphQL from "type-graphql";

export enum BusinessPartnerScalarFieldEnum {
  id = "id",
  code = "code",
  isActive = "isActive",
  category = "category",
  customerOrSupplierOriginCategory = "customerOrSupplierOriginCategory",
  companyName1 = "companyName1",
  companyName2 = "companyName2",
  shortCompanyName = "shortCompanyName",
  europeanUnionVatNumber = "europeanUnionVatNumber",
  isIntersite = "isIntersite",
  businessPartnerSite = "businessPartnerSite",
  country = "country",
  siteIdentificationNumber = "siteIdentificationNumber",
  standardIndustrialClassificationCode = "standardIndustrialClassificationCode",
  currency = "currency",
  language = "language",
  acronym = "acronym",
  italianTaxNumber = "italianTaxNumber",
  fiscalCode = "fiscalCode",
  consolidationGroup = "consolidationGroup",
  consolidationCode = "consolidationCode",
  isCustomer = "isCustomer",
  isSupplier = "isSupplier",
  isGrantor = "isGrantor",
  isCarrier = "isCarrier",
  isFactor = "isFactor",
  isSalesRep = "isSalesRep",
  isMiscellaneousBusinessPartner = "isMiscellaneousBusinessPartner",
  isProspect = "isProspect",
  isServiceSupplier = "isServiceSupplier",
  isServiceCaller = "isServiceCaller",
  accountingCode = "accountingCode",
  defaultAddress = "defaultAddress",
  defaultContact = "defaultContact",
  defaultBankId = "defaultBankId",
  reportAccessCode = "reportAccessCode",
  expenseEntryType = "expenseEntryType",
  isMailingProhibited = "isMailingProhibited",
  cfonbPaymentMethod = "cfonbPaymentMethod",
  nonResidentAccount = "nonResidentAccount",
  isPhysicalPerson = "isPhysicalPerson",
  isCashExcluded = "isCashExcluded",
  documentType = "documentType",
  isPublicSector = "isPublicSector",
  relatedCompany = "relatedCompany",
  consolidationPartner = "consolidationPartner",
  registrationNumber = "registrationNumber",
  vatNumber = "vatNumber",
  economicOperatorRegistrationAndIdNumber = "economicOperatorRegistrationAndIdNumber",
  serviceCode = "serviceCode",
  electronicInvoiceType = "electronicInvoiceType",
  mappingCode = "mappingCode",
  electronicAddress = "electronicAddress",
  PTHFLG_0 = "PTHFLG_0",
  BPRFLG_0 = "BPRFLG_0",
  BPRFLG_1 = "BPRFLG_1",
  BPRFLG_2 = "BPRFLG_2",
  BPRFLG_3 = "BPRFLG_3",
  BIDCRY_0 = "BIDCRY_0",
  EXPNUM_0 = "EXPNUM_0",
  CREUSR_0 = "CREUSR_0",
  CREDAT_0 = "CREDAT_0",
  UPDUSR_0 = "UPDUSR_0",
  UPDDAT_0 = "UPDDAT_0",
  CREDATTIM_0 = "CREDATTIM_0",
  UPDDATTIM_0 = "UPDDATTIM_0",
  AUUID_0 = "AUUID_0",
  ZCRMREF_0 = "ZCRMREF_0",
  ZTAXREF_0 = "ZTAXREF_0",
  RTGCOD_0 = "RTGCOD_0",
  VALIDATE_0 = "VALIDATE_0",
  USR_0 = "USR_0",
  DESTYP_0 = "DESTYP_0",
  UPDTICK_0 = "UPDTICK_0"
}
TypeGraphQL.registerEnumType(BusinessPartnerScalarFieldEnum, {
  name: "BusinessPartnerScalarFieldEnum",
  description: undefined,
});
