import fs from 'fs/promises';
import path from 'path';
import prisma from '../src/database/config';
import { env } from '../src/database/env';

interface MenuLocation {
  MENLOC_0: number;
}

interface MenuItemData {
  MENLOC_0: number;
  LANNUM_0: number;
  LANMES_0: string;
}

// Fun√ß√£o para sanitizar nomes de membros de enum/objeto
function sanitizeEnumKey(name: string): string {
  let sanitized = name
    .normalize('NFD') // Decomp√µe caracteres acentuados (ex: '√©' -> 'e' + '¬¥')
    .replace(/[\u0300-\u036f]/g, '') // Remove os diacr√≠ticos (acentos)
    .replace(/[^a-zA-Z0-9_]/g, '_') // Substitui n√£o alfanum√©ricos (exceto _) por _
    .replace(/^[^a-zA-Z_]+/, ''); // Remove caracteres n√£o alfab√©ticos ou _ do in√≠cio

  // Se ap√≥s a sanitiza√ß√£o o nome ficar vazio ou come√ßar com um n√∫mero (inv√°lido para identificador JS)
  if (!sanitized || /^\d/.test(sanitized)) {
    sanitized = `KEY_${sanitized}`; // Adiciona um prefixo
  }
  return sanitized.toUpperCase(); // Conven√ß√£o para constantes/enums
}

async function generateLocalMenusFile() {
  try {
    console.log('üîå Conectando ao banco de dados...');
    await prisma.$connect();
    console.log('‚úÖ Conectado.');

    const dbSchema = env.DB_SCHEMA;

    if (!dbSchema) {
      console.error('üí• Erro: env.SCHEMA n√£o est√° definido. Verifique seu arquivo src/database/env.ts');
      process.exit(1);
    }
    console.log(`‚ÑπÔ∏è Usando schema do banco: ${dbSchema}`);

    console.log('üîç Buscando localiza√ß√µes de menu distintas...');
    // Query para buscar todos os MENLOC_0 distintos que t√™m itens de menu v√°lidos
    const query = `SELECT DISTINCT MENLOC_0 FROM ${dbSchema}.AMENLOC ORDER BY MENLOC_0`;

    const menuLocations = await prisma.$queryRawUnsafe<MenuLocation[]>(query);

    if (!menuLocations || menuLocations.length === 0) {
      console.log('üö´ Nenhuma localiza√ß√£o de menu encontrada para gerar. Saindo.');
      return;
    }
    console.log(`‚ÑπÔ∏è Encontradas ${menuLocations.length} localiza√ß√µes de menu.`);

    let fileContent = `// Arquivo gerado automaticamente em: ${new Date().toISOString()}\n`;
    fileContent += `// N√£o edite este arquivo manualmente, pois suas altera√ß√µes ser√£o sobrescritas.\n\n`;

    for (const loc of menuLocations) {
      const menlocId = loc.MENLOC_0;
      console.log(`üìÑ Processando Menu ID: ${menlocId}...`);

      const menuItems = await prisma.$queryRaw<MenuItemData[]>`
        SELECT A.MENLOC_0, B.LANNUM_0, B.LANMES_0
        FROM AMENLOC A WITH (NOLOCK)
        INNER JOIN APLSTD B WITH (NOLOCK) ON B.LANCHP_0 = A.MENLOC_0 AND B.LANNUM_0 > 0 AND B.LAN_0 = 'POR'
        WHERE A.MENLOC_0 = ${menlocId}
        ORDER BY B.LANNUM_0;
      `;

      if (menuItems && menuItems.length > 0) {
        const objectName = `Menu${menlocId}Options`;
        fileContent += `export const ${objectName} = {\n`;
        const reverseMapEntries: string[] = [];

        for (const item of menuItems) {
          const key = sanitizeEnumKey(item.LANMES_0);
          const value = item.LANNUM_0;
          fileContent += `  ${key}: ${value}, // Original: '${item.LANMES_0.replace(/'/g, "\\'")}'\n`;
          reverseMapEntries.push(`  ${value}: "${key}"`);
        }
        fileContent += `} as const;\n\n`;

        // Tipos auxiliares
        fileContent += `export type ${objectName}Keys = keyof typeof ${objectName};\n`;
        fileContent += `export type ${objectName}Values = typeof ${objectName}[${objectName}Keys];\n\n`;

        // Mapeamento reverso
        const mapName = `${objectName}Map`;
        fileContent += `export const ${mapName}: Record<${objectName}Values, ${objectName}Keys> = {\n`;
        fileContent += reverseMapEntries.join(',\n');
        fileContent += `\n};\n\n`;
        fileContent += `// --- Fim do Menu ID: ${menlocId} ---\n\n`;
      } else {
        console.log(`‚ö†Ô∏è Nenhum item encontrado para Menu ID: ${menlocId}.`);
      }
    }

    const outputDir = path.join(__dirname, '..', 'src', 'utils', 'generated'); // Ajuste o caminho se necess√°rio
    const outputPath = path.join(outputDir, 'local-menus.ts');

    await fs.mkdir(outputDir, { recursive: true }); // Cria o diret√≥rio se n√£o existir
    await fs.writeFile(outputPath, fileContent);

    console.log(`‚úÖ Arquivo de menus gerado com sucesso em: ${outputPath}`);
  } catch (error) {
    console.error('üí• Erro ao gerar arquivo de menus:', error);
    process.exit(1);
  } finally {
    console.log('üîå Desconectando do banco de dados...');
    await prisma.$disconnect();
    console.log('‚ûñ Desconectado.');
  }
}

generateLocalMenusFile();
