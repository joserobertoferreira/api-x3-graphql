# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Data to filter addresses. All fields are optional."""
input AddressFilterInput {
  city: String
  code: String
  country: String

  """List of emails to filter addresses."""
  emails: [String!]

  """List of phone numbers to filter addresses."""
  phones: [String!]
  zipCode: String
}

"""Represent an address"""
type AddressType {
  addressLine1: String
  addressLine2: String
  addressLine3: String
  city: String

  """Address code"""
  code: String!
  country: String
  countryName: String
  description: String
  emails: [String!]
  guid: String

  """Unique address ID"""
  id: ID!

  """Flag to set if is default address"""
  isDefault: Int
  phones: [String!]
  state: String
  zipCode: String
}

"""Represent a company"""
type CompanyType {
  """List of company addresses"""
  addresses: [AddressType!]
  company: String!
  companyName: String!
  country: String
  defaultAddress: String
  dimension1: String
  dimension2: String
  dimension3: String
  dimension4: String
  dimension5: String
  dimension6: String
  dimension7: String
  dimensionType1: String
  dimensionType2: String
  dimensionType3: String
  dimensionType4: String
  dimensionType5: String
  dimensionType6: String
  dimensionType7: String
  isLegalCompany: Int!
  legislation: String!

  """List of sites associated with the company"""
  sites: [SiteType!]
  standardName: String!
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  company: StringFilter
  companyName: StringFilter
  country: StringFilter
  defaultAddress: StringFilter
  dimension1: StringFilter
  dimension2: StringFilter
  dimension3: StringFilter
  dimension4: StringFilter
  dimension5: StringFilter
  dimension6: StringFilter
  dimension7: StringFilter
  dimensionType1: StringFilter
  dimensionType2: StringFilter
  dimensionType3: StringFilter
  dimensionType4: StringFilter
  dimensionType5: StringFilter
  dimensionType6: StringFilter
  dimensionType7: StringFilter
  isLegalCompany: IntFilter
  legislation: StringFilter
  standardName: StringFilter
}

"""Data to create a sales order, include header and lines"""
input CreateSalesOrderInput {
  """Currency code"""
  currency: String

  """Reference"""
  customerOrderReference: String

  """Fixture"""
  dimension1: String!

  """Broker"""
  dimension2: String

  """Department"""
  dimension3: String

  """Location"""
  dimension4: String

  """Type"""
  dimension5: String

  """Product"""
  dimension6: String

  """Analysis"""
  dimension7: String

  """An array with all products to order."""
  lines: [CreateSalesOrderLineInput!]!

  """Order date - YYYYMMDD"""
  orderDate: Date

  """Payment term"""
  paymentTerm: String

  """Price -/+ tax"""
  priceIncludingOrExcludingTax: Int

  """Requested delivery date - YYYYMMDD"""
  requestedDeliveryDate: Date

  """Sales order type"""
  salesOrderType: String

  """Sales site"""
  salesSite: String!

  """Delivery address code"""
  shipToCustomerAddress: String

  """Shipment date - YYYYMMDD"""
  shipmentDate: Date

  """Shipment site"""
  shipmentSite: String

  """Sold-to-customer code"""
  soldToCustomer: String!

  """Tax rule"""
  taxRule: String
}

input CreateSalesOrderLineInput {
  expectedDeliveryDate: DateTimeISO

  """Unit price of the product"""
  grossPrice: Float

  """Product SKU"""
  product: String!

  """Quantity of the product in sales unit"""
  quantity: Float!

  """Tax level code for the product"""
  taxLevelCode: String
}

input CustomerFilterInput {
  address: AddressFilterInput
  category: String
  isActive: Boolean
  nameContains: String

  """Pagination number (default=0)"""
  skip: Int = 0

  """Number of customers to return."""
  take: Int! = 100
}

"""Represents a paginated list of customers"""
type CustomerPaginationType {
  """Indicates if there are more pages to fetch."""
  hasNextPage: Boolean!
  nodes: [CustomerType!]!

  """Total number of items in the collection."""
  totalCount: Int!
}

"""Represents a customer in the system"""
type CustomerType {
  """List of customer addresses"""
  addresses: [AddressType!]
  category: String

  """Customer code"""
  customerCode: String!
  customerCurrency: String
  customerName: String

  """Customer default address code"""
  defaultAddressCode: String
  isActive: Int
  shortName: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  """Create a new sales order"""
  createSalesOrder(data: CreateSalesOrderInput!): SalesOrder!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Products {
  code: String!
  configuratorProductLine: String!
  description1: String!
  description2: String!
  description3: String!
  productCategory: String!
  productStatisticalGroup1: String!
  productStatisticalGroup2: String!
  productStatisticalGroup3: String!
  productStatisticalGroup4: String!
  productStatisticalGroup5: String!
  productStatus: Int!
  purchaseUnit: String!
  salesUnit: String!
  taxLevel1: String!
  taxLevel2: String!
  taxLevel3: String!
}

type Query {
  """Returns a list of all existing companies based on filter"""
  companies(where: CompanyWhereInput): [CompanyType!]!

  """Fetches a single customer by their business code."""
  customer(customerCode: String!): CustomerType

  """Fetches a list of customers, with optional filters."""
  customers(filter: CustomerFilterInput): CustomerPaginationType!

  """Returns a list of sites, with filter options."""
  sites(where: SiteWhereInput): [SiteType!]!

  """Returns a list of suppliers, with filter options."""
  suppliers(where: SupplierWhereInput): [SupplierType!]!
}

type SalesOrder {
  billAddressLine1: String!
  billAddressLine2: String!
  billAddressLine3: String!
  billToCustomer: String!
  billToCustomerAddress: String!
  billToCustomerCity: String!
  billToCustomerContact: String!
  billToCustomerCountry: String!
  billToCustomerCountryName: String!
  billToCustomerEuropeanUnionVatNumber: String!
  billToCustomerName1: String!
  billToCustomerName2: String!
  billToCustomerPostalCode: String!
  category: Int!
  company: String!
  currency: String!
  customerOrderReference: String!
  customerStatisticalGroup1: String!
  dimension1: String!
  dimension2: String!
  dimension3: String!
  dimension4: String!
  dimension5: String!
  dimension6: String!
  dimension7: String!
  dimensionType1: String!
  dimensionType2: String!
  dimensionType3: String!
  dimensionType4: String!
  dimensionType5: String!
  dimensionType6: String!
  dimensionType7: String!
  id: String!
  invoicedStatus: Int!
  linesAmountExcludingTax: Decimal!
  linesAmountExcludingTaxInCompanyCurrency: Decimal!
  linesAmountIncludingTax: Decimal!
  linesAmountIncludingTaxInCompanyCurrency: Decimal!
  orderDate: Date!
  orderLines: [SalesOrderLine!]
  orderPrices: [SalesOrderPrice!]
  orderStatus: Int!
  payByBusinessPartner: String!
  payByBusinessPartnerAddress: String!
  paymentTerm: String!
  priceIncludingOrExcludingTax: Int!
  requestedDeliveryDate: Date!
  salesOrderType: String!
  salesSite: String!
  shipAddressLine1: String!
  shipAddressLine2: String!
  shipAddressLine3: String!
  shipToCustomerAddress: String!
  shipToCustomerCity: String!
  shipToCustomerContact: String!
  shipToCustomerCountry: String!
  shipToCustomerCountryName: String!
  shipToCustomerName1: String!
  shipToCustomerName2: String!
  shipToCustomerPostalCode: String!
  shipmentDate: Date!
  soldAddressLine1: String!
  soldAddressLine2: String!
  soldAddressLine3: String!
  soldToCustomer: String!
  soldToCustomerAddress: String!
  soldToCustomerCity: String!
  soldToCustomerContact: String!
  soldToCustomerCountry: String!
  soldToCustomerCountryName: String!
  soldToCustomerLanguage: String!
  soldToCustomerName1: String!
  soldToCustomerName2: String!
  soldToCustomerPostalCode: String!
  taxAmount: Decimal!
  taxRule: String!
  taxableAmount: Decimal!
  totalAmountExcludingTax: Decimal!
  totalAmountExcludingTaxInCompanyCurrency: Decimal!
  totalAmountIncludingTax: Decimal!
  totalAmountIncludingTaxInCompanyCurrency: Decimal!
}

type SalesOrderLine {
  category: Int!
  company: String!
  isInvoiced: Int!
  lineNumber: Int!
  lineStatus: Int!
  price: SalesOrderPrice
  product: String!
  productDetails: Products
  quantityInSalesUnitOrdered: Decimal!
  salesOrder: String!
  salesSite: String!
  sequenceNumber: Int!
  shipToCustomerAddress: String!
  soldToCustomer: String!
}

type SalesOrderPrice {
  calculatedTaxableBase1: Decimal!
  calculatedTaxableBase2: Decimal!
  grossPrice: Decimal!
  line: SalesOrderLine
  lineNumber: Int!
  lineStatus: Int!
  netPrice: Decimal!
  netPriceExcludingTax: Decimal!
  netPriceIncludingTax: Decimal!
  productDescriptionInCustomerLanguage: String!
  productDescriptionInUserLanguage: String!
  productDetails: Products
  salesOrder: String!
  salesUnit: String!
  sequenceNumber: Int!
  tax1: String!
  tax2: String!
  tax3: String!
  taxLevel1: String!
  taxLevel2: String!
  taxLevel3: String!
}

"""Represent a company site"""
type SiteType {
  """List of addresses associated with the site"""
  addresses: [AddressType!]
  country: String!
  defaultAddress: String
  dimension1: String
  dimension2: String
  dimension3: String
  dimension4: String
  dimension5: String
  dimension6: String
  dimension7: String
  dimensionType1: String
  dimensionType2: String
  dimensionType3: String
  dimensionType4: String
  dimensionType5: String
  dimensionType6: String
  dimensionType7: String
  legalCompany: String!
  legislation: String!
  siteCode: String!
  siteName: String!
  standardName: String!
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  UPDTICK_0: IntFilter
  country: StringFilter
  defaultAddress: StringFilter
  legalCompany: StringFilter
  legislation: StringFilter
  siteCode: StringFilter
  siteName: StringFilter
  standardName: StringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type SupplierType {
  Notes: String
  accountingCode: String
  addressByDefault: String

  """List of addresses associated with the supplier"""
  addresses: [AddressType!]
  amountType: Int
  billBySupplier: String
  billBySupplierAddress: String
  carrier: String
  cashVatDeadline: DateTimeISO
  category: String
  contact: String
  creditControl: Int
  currency: String
  currencyRateDetermination: Int
  defaultContact: String
  deliveryMode: String
  disputeStatus: Int
  dueDateOrigin: Int
  earlyDiscount: String
  freeRanking: Decimal
  freeRankingCoefficient: Decimal
  groupSupplier: String
  hasNoWhiteListVerification: Int
  incoterm: String
  intrastatIncreaseCoefficient: Decimal
  intrastatTransportLocation: Int
  is281Submitted: Int
  isActive: Int
  isCashVat: Int
  isDas2Submitted: Int
  isElectronicInvoice: Int
  isMultiLineOrder: Int
  isPaymentHeld: Int
  leadTimeRanking: Decimal
  leadTimeRankingCoefficient: Decimal
  location: String
  minimumOrderAmount: Decimal
  mustPrintOrderForm: Int
  mustPrintReceiptNote: Int
  mustPrintReturnSlip: Int
  mustRemindAcknowledgment: Int
  mustRemindDelivery: Int
  ourCustomerNameForSupplier: String
  ourCustomerNumberForSupplier: String
  payToBusinessPartner: String
  payToBusinessPartnerAddress: String
  paymentTerm: String
  priceRanking: Decimal
  priceRankingCoefficient: Decimal
  purchaseOrderTextKey: String
  qualityRanking: Decimal
  qualityRankingCoefficient: Decimal
  quantityRanking: Decimal
  quantityRankingCoefficient: Decimal
  rateType: Int
  returnOrderTextKey: String
  rexNumber: String
  riskSupplier: String
  selfBillingCode: String
  serviceSupplierCode: String
  startDataElectronicInvoice: Date
  supplierABCClass: Int
  supplierCode: String!

  """The standard name of the supplier"""
  supplierName: String!

  """The type of the supplier"""
  supplierType: Int
  taxRule: String
  totalRanking: Decimal
  unavailable: String
}

input SupplierWhereInput {
  address: AddressFilterInput
  category: StringFilter
  isActive: Boolean
  shortName: StringFilter

  """Pagination number (default=0)"""
  skip: Int = 0
  supplierCode: StringFilter
  supplierName: StringFilter

  """Number of suppliers to return."""
  take: Int! = 100
}